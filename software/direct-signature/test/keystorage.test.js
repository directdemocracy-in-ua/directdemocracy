
var assert = require('assert');
var keystore = require('../js/keystore');

describe('keystore', () => {
	describe('import', () => {
		
		const SAMPLE_KEY_LENGTH = 256;
		/*
		 * This sample can be generated by following command via openssl
		 * openssl genrsa -out key.pem 256
		 */
		const SAMPLE_PRIVATE_KEY_IN_PKCS1_FORMAT = 
			"-----BEGIN RSA PRIVATE KEY-----" +
			"MIGtAgEAAiEAucCFwg+WM4A+F4pQrjTVbBP0v3/vTiILncekLZD5NmkCAwEAAQIh" +
			"AIE2mJVPLGf0/Lx5XfhhDlhpl05c7t74IdTFOxXytS6BAhEA5dF1XDb1ovNPbCjW" +
			"wFEDeQIRAM7p5RyZNXqXr6Y04y8innECEQCa0ELy38MRBj6WadxgqTJhAhEAjc5I" +
			"4i+yMiGRFPS8Goq8UQIRAJu7F81dpRIn4/5z+0y/0l0=" +
			"-----END RSA PRIVATE KEY-----";
		
		describe('PKCS1', ()=> {
			it('importAsObject', () => {
				var keyStore = keystore.importPKCS1(SAMPLE_PRIVATE_KEY_IN_PKCS1_FORMAT);
				assert.ok(keyStore);
			});
			
			it('length equals 256', () => {
				var keyStore = keystore.importPKCS1(SAMPLE_PRIVATE_KEY_IN_PKCS1_FORMAT);
				assert.equal(keyStore.getLength(), SAMPLE_KEY_LENGTH);
			});
		});
		
		/*
		 * This sample can be generated by following command via openssl
		 *  openssl pkcs8 -topk8 -inform pem -in key.pem -outform pem -passout pass:1234 -out pkcs8.encrypted.pem
		 */
		const SAMPLE_PRIVATE_KEY_IN_PKCS8_FORMAT = 
			"-----BEGIN PRIVATE KEY-----" +
			"MIHDAgEAMA0GCSqGSIb3DQEBAQUABIGuMIGrAgEAAiEArjbviGOqAHG7W88isR0S" +
			"GJsWo8znlEBkwdkkngq02gUCAwEAAQIgJka9pAq5rDVQw+AjsCRB+DcInp3YaKzM" +
			"Bhr3pUzwYHUCEQDgsPF/nA/fmigwuZJtkH6fAhEAxn1rf2VSrp2RVmPkuIJ42wIQ" +
			"DYZ5Mw5I4lPcQXqaNuAwzwIRAIy30gQpUyrULntuqnJcnU0CEQCf7hxFcIrlqTIt" +
			"fmmEDuYG" +
			"-----END PRIVATE KEY-----";
		
		
		describe('PKCS8', ()=> {
			it('importAsObject', () => {
				var keyStore = keystore.importPKCS8(SAMPLE_PRIVATE_KEY_IN_PKCS8_FORMAT);
				assert.ok(keyStore);
			});
			
			it('length equals 256', () => {
				var keyStore = keystore.importPKCS8(SAMPLE_PRIVATE_KEY_IN_PKCS8_FORMAT);
				assert.equal(keyStore.getLength(), SAMPLE_KEY_LENGTH);
			});
		});
		
		/*
		 * This sample can be generated by following command via openssl
		 *  openssl pkcs8 -topk8 -inform pem -in key.pem -outform pem -passout pass:1234 -out pkcs8.encrypted.pem
		 */
		const SAMPLE_PRIVATE_KEY_IN_PKCS8_ENCRYPTED_FORMAT = 
			"-----BEGIN ENCRYPTED PRIVATE KEY-----" +
			"MIHoMBsGCSqGSIb3DQEFAzAOBAjDOFhQ0WLyuAICCAAEgciKcIxmO06t8SbWxFbD" +
			"RC1lzCPicRyVImTW/e99o195bz44TTxCNohjQlVh8lfo4iYZMfUjv6OrzLAl254F" +
			"KV1AjT0A9oKkY6mfIFfr/1m71vGU16H7TPCbDkc5Vwsv4v163j6ysuBW1k+Kq5oP" +
			"Oev/005t14yruE4IFHtlDxOjct5uj0se5Qfi0fEMJMCT5dT/zusOpWf87PTecVTq" +
			"JRA05ENtniSTArsWgNFkXQSpBtpVD/dzBmPvsFvN14xqclzgFWV7MA/ksg==" +
			"-----END ENCRYPTED PRIVATE KEY-----";
		
		describe('PKCS8 Encrypted', ()=> {
			it('importAsObject', () => {
				var keyStore = keystore.importPKCS8(SAMPLE_PRIVATE_KEY_IN_PKCS8_ENCRYPTED_FORMAT);
				assert.ok(keyStore);
			});
			
			it('length equals 256', () => {
				var keyStore = keystore.importPKCS8(SAMPLE_PRIVATE_KEY_IN_PKCS8_ENCRYPTED_FORMAT);
				assert.equal(keyStore.getLength(), SAMPLE_KEY_LENGTH);
			});
		});
	});
});